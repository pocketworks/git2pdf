#! /usr/bin/ruby
require 'thor'
require "#{File.expand_path File.dirname(__FILE__)}/../lib/git2pdf"
#require 'password'

class Git2PdfBash < Thor
  desc "gen <repository1,repository2>", "Create a PDF for the open issues in a given repository."
  option :repos, :default => "", aliases: :r
  option :user, aliases: :u
  option :password, aliases: :p, :default=>nil
  option :api, aliases: :a
  option :organisation, aliases: :o
  option :labels, aliases: :l
  option :from_number, aliases: :n
  option :from_date, aliases: :d
  option :quiet_labels, aliases: :q

  def gen(repositories="")
    repos = repositories.split(',').collect { |r| r.strip }
    if repos.empty?
      repos = options[:repos].split(',').collect { |r| r.strip } unless options[:repos] == "repos"
    end
    puts "Creating a PDF of GitHub issues for repos: #{repos.join(', ')}"
    puts "Using organisation #{options[:organisation]}" if options[:organisation]
    if options[:api] && !options[:api].empty?
	    puts "Using API #{options[:api]}"
    end
    pass = options[:password]
    if options[:password] == "password" or options[:password].nil? or options[:password].strip.length == 0
      #option[:password] = Password.get("GitHub Password:")
      puts "Password: "
      pass = STDIN.noecho(&:gets)
      pass = pass.strip.gsub(/\n/,'')
    end

    g = Git2Pdf.new repos: repos, basic_auth: [options[:user],pass], org: options[:organisation], user: options[:user], api: options[:api], labels: options[:labels], from_number: options[:from_number], from_date: options[:from_date], quiet_labels: options[:quiet_labels]
    done = g.execute
    puts "\n#{done} cards output to issues.pdf"
  end


end

Git2PdfBash.start(ARGV)
