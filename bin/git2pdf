#! /usr/bin/ruby
require 'thor'
require "#{File.expand_path File.dirname(__FILE__)}/../lib/git2pdf"
#require 'password'

class Git2PdfBash < Thor
  desc "gen <repository1,repository2>", "Create a PDF for the open issues in a given repository."
  option :repos, :default => "", aliases: :r
  option :user, aliases: :u
  option :token, aliases: :t
  option :password, aliases: :p, :default=>nil
  option :api, aliases: :a
  option :organisation, aliases: :o
  option :labels, aliases: :l
  option :from_number, aliases: :f

  def gen(repositories="")
    repos = repositories.split(',').collect { |r| r.strip }
    if repos.empty?
      repos = options[:repos].split(',').collect { |r| r.strip } unless options[:repos] == "repos"
    end
    puts "Creating a PDF of GitHub issues for repos: #{repos.join(', ')}"
    puts "Using organisation #{options[:organisation]}" if options[:organisation]
    if options[:api] && !options[:api].empty?
	    puts "Using API #{options[:api]}"
    end
    pass = options[:password]
    if options[:token].nil?
      if options[:token].nil? and (options[:password] == "password" or options[:password].nil? or options[:password].strip.length == 0)
        puts "Password: "
        pass = STDIN.noecho(&:gets)
        pass = pass.strip.gsub(/\n/,'')
      end
      g = Git2Pdf.new repos: repos, basic_auth: [options[:user],pass], labels: options[:labels], org: options[:organisation], user: options[:user]
    
      else
        if options[:token] == "token"
          puts "Token: "
          pass = STDIN.noecho(&:gets)
          token = pass.strip.gsub(/\n/,'')
        else
          token = options[:token]
        end

        g = Git2Pdf.new repos: repos, token: token, labels: options[:labels], org: options[:organisation]
    end
    done = g.execute
    puts "\n#{done} cards output to issues.pdf"
  end
end

Git2PdfBash.start(ARGV)
